1. Manipulator std::endl - str. 57

2. Zasady nazywania zmiennych - str. 80

3. Ograniczenia typow calkowitoliczbowych - str. 82

4. Ograniczenia typow zmiennoprzecinkowych - str. 103

5. Dokladnosc typow zmiennoprzecinkowych: 
   - float: 6-7 cyfr znaczacych
   - double: 15-16 cyfr znaczacych
   - long double: 19-20 cyfr znaczacych
   
6. Podczas wykonywania danego wyrazenia kompilator automatycznie dokonuje konwersji wszelkich typow calkowitoliczbowych na typ int (jesli tylko typ int jest w stanie calkowicie pomiescic wartosci
   danego typu) np. majac trzy zmienne typu short: one, two, three oraz instrukcje "three = one + two;" kompilator najpierw dokonuje konwersji zmiennych one oraz two na typ int, wykonuje obliczenia
   na tym typie, a na koncu konwertuje wynik z powrotem na typ short. Podczas operacji na danych typu calkowitoliczbowego >= od typu int nastepuje automatyczna konwersja na typ o porzadku wyzszym, by
   nie dopuscic do utraty danych. Identycznie jest w przypadku operacji na liczbach zmiennoprzecinkowych, gdzie typ o porzadku nizszym konwertowany jest na typ o porzadku wyzszym. W przypadku operacji
   na danych roznych typow, zawsze dokonuje sie konwersja liczb na typ zmiennoprzecinkowy (o ile ten jest w stanie pomiescic wszystkie wartosci typu calkowitoliczbowego).
   
7. Za pomoca inicjalizacji klamrowej mozna zainicjalizowac zerem wszystkie elementy tablicy np. "int tab[3] {};" lub "float tab[45] = {};".

8. Pole bitowe - str. 149

9. Unia - str.149-150

10. Typ wyliczeniowy:
    - deklaracja: "enum spectrum {czerwony, pomaranczowy, zielony, niebieski, fioletowy = 50, zolty, rozowy};"
    - oznaczenia: 
      * spectrum - typ wyliczeniowy
      * czerwony, pomaranczowy, zielony ... - enumerator
    - wartosci: czerwony = 0, pomaranczowy = 1, zolty = 51, rozowy = 52
    - deklaracja zmiennej: "spectrum pasmo = niebieski;"
    - mozliwosc konwersji typu wyliczeniowego na typ calkowity int:
      * "int kolor = zielony;" -> wtedy kolor = 3
      * "int kolor = 3 + czerwony;" -> wtedy kolor = 3 + 1 = 4
    - brak mozliwosci konwersji typu calkowitego na wyliczeniowy bez jawnego rzutowania typu:
      * "spectrum pasmo = 3;" -> zle
      * "spectrum pasmo = 3 + czerwony;" -> zle (czerwony konwertowany na int)
      * "spectrum pasmo = spectrum(3);" -> dobrze (pasmo = niebieski)
    - dla typu wyliczeniowego zdefiniowany jest jedynie operator przypisania, wiec:
      * "spectrum pasmo = czerwony + zielony;" -> zle (czerwony i zielony sa konwertowane na typ int, wykonywania jest dodawanie, wynik jest typu int, wiec nie moze zostac automatycznie
                                                       skonwertowany na zmienna typu wyliczeniowego)
      * "spectrum pasmo = czerwony; ++czerwony;" -> zle (czerwony konwertowany na int, wykonywana operacja preinkrementacji, jednak wyniku nie mozna przypisac zmiennej typu wyliczeniowego)
    - zakresy wartosci w typach wyliczeniowych: nie jest zabroniona operacja np. "pasmo = spectrum(45);", o ile wartosc 45 miesci sie w zakresie wartosci typu wyliczeniowego (omowienie sposobu
      obliczania zakresu wartosci w typach wyliczeniowych na str. 153)

11. Zasady uzywania operatorow new/new[] oraz delete/delete[] - str. 163

12. Tablice i wskazniki:
    - deklaracja: "int tab[5] = {0,1,2,3,4};"
    - nazwa tablicy jest adresem jej pierwszego elementu: tab = &tab[0] -> *tab = tab[0]
    - odnoszenie sie do poszczegolnych elementow tablicy: tab[1] = *(tab+1), tab[3] = *(tab+3)
    - deklaracja wskaznika na tablice: "int * wsk = tab;":
      * wsk[0] = tab[0], wsk[1] = tab[1] ...
      * "wsk = wsk + 2;" -> dobrze -> zwiekszenie wskaznika o wielkosc rowna dwukrotnej wielkosci jednego elementu tablicy (dla typu int zazwyczaj 2 razy 4 bajty = 8 bajtow) -> wsk[0] = tab[2] = 2 ...
      * "tab = tab + 1;" ->  zle -> nazwa tablicy jest stala

13. Klasa szablonowa std::vector - odpowiednik szablonowy dla tablicy stworzonej przez uzytkownika i przydzielanej w sposob dynamiczny (sterta), czyli w czasie wykonywania programu (w zwiazku z tym
                                   taka tablica mimo umieszczenia jej deklaracji w kodzie moze nie powstac, jesli program "ominie" elementy kodu, w ktorym jest zadeklarowana i wykorzystywana, rowniez
                                   rozmiar takiej tablicy moze byc dowolnie zmieniany w czasie trwania programu)
                                   
14. Klasa szablonowa std::array - odpowiednik szablonowy dla tablicy stworzonej przez uzytkownika i przydzielanej w sposob statyczny/staly (stos lub pamiec statyczna), juz podczas etapu kompilacji
                                  programu (w zwiazku z tym taka tablica istnieje od samego poczatku wykonywania programu, niezaleznie od tego czy jest wykorzystywana czy nie, jej rozmiar jest
                                  staly i nie moze byc zmieniany w czasie trwania programu)
                                  
15. Inkrementacja zmiennych: dla typow wbudowanych dzialanie formy przyrostkowej jak i przedrostkowej jest w zasadzie nierozroznialne w dzialaniu. Roznica moze byc widoczna dopiero w przypadku
    tworzenia operatorow inkrementacji dla typow wlasnych uzytkownika takich jak struktury lub klasy:
    - forma przedrostkowa jest wydajniejsza (zwiekszenie wartosci i nastepnie jej zwrocenie)
    - forma przyrostkowa jest mniej wydajna (stworzenie kopii wartosci, nastepnie zwiekszenie wartosci i na koncu zwrocenie kopii)
    
16. Pętle nieskonczone:
    - "while(true)" -> w nawiasach musi byc podane stale prawdziwe wyrazenie
    - "for(;;)" -> brak warunku w petli for jest traktowany jako stale prawdziwe wyrazenie
    
17. Pętla opóźnienia - str. 218

18. Aliasy typów "typedef":
    - deklaracja: "typedef NazwaTypu NazwaAliasu" np. "typedef long double ld;", "typedef int * wsk_na_int;"
    - użycie: "wsk_na_int one, two;" -> tworzy dwie zmienne typu int*
    - tworzenie aliasu typu za pomoca slowka kluczowego typedef nie tworzy nowego typu, a jedynie nowa nazwe dla typu istniejacego, wiec np. wyrazenie 'ld' bedzie traktowane przez kompilator
      jako zwykle wystapienie slowka long double
      
19. Pętla zakresowa:
    - deklaracja prostej wbudowanej tablicy: "int tab[5] = {1, 2, 3, 4, 5};"
    - stworzenie pętli zakresowej sluzacej do odczytu danych z tablicy: "for(int x: tab) {std::cout << x << std::endl;} -> 'x' reprezentuje kolejne elementy tablicy, wiec na poczatku x = tab[0],
      pozniej x = tab[1] itd, w tym przypadku nie mozna zmieniac w zaden sposob elemntow tablicy
    - stworzenie pętli zakresowej sluzacej do modyfikacji danych z tablicy: "for(int &x: tab) {x += 10;} -> poszczegolne wartosci tablicy zwiekszane o 10
    
20. Punkt odniesienia - operator, dla ktorego kazda wartosc wyrazenia po jego lewej stronie jest interpretowana przed przejsciem do wyrazenia po jego prawej strony. Do punktow odniesienia zaliczamy:
    - operator średnik ';'
    - operator przecinek ','
    - logiczny operator alternatywy '||'
    - logiczny operator koniunkcji '&&'
    Przykład dzialania: "i++ < 6 || i == j; " -> wynikiem wyrazenia dla np. i = 9 oraz j = 10 jest wartosc true, poniewaz najpierw nastepuje porownanie '9 < 6', ktore daje wartosc false, nastepnie
    w zwiazku z faktem ze operator '||' jest punktem odniesienia nastepuje postinkrementacja zmiennej 'i', wiec w porownaniu 'i = j' obie zmienne maja wartosc 10, a calosc wyrazenia daje wartosc true
    
21. Standard języka gwarantuje, że wyrażenia logiczne będą interpretowane od lewej strony do prawej strony i że ich interpretacja zostanie przerwana gdy znany będzie już wynik całego wyrażenia
    logicznego np. "x != 0 && 100 / x > 1" -> w przypadku gdy 'x = 0' wyrazenie '100 / x > 1' nie zostanie wykonane, gdyz niezaleznie od jego wyniku wartosc calego wyrazenia logicznego wynosi false
    
22. Operator wyboru '?:':
    - postać: "wyrazenie1 ? wyrazenie2 : wyrazenie3"
    - jesli 'wyrazenie1 = true' -> wykonywanie 'wyrazenie2', jesli 'wyrazenie1 = false' -> wykonywanie 'wyrazenie3'
    - przyklad: "int a = 9, b = 11; int c = a < b ? a : b;" -> nastapi inicjalizacja zmiennej 'c' wartosci zmiennej 'a = 9'
    
23. Instrukcja switch - wyrazenie interpretowane w instrukcji switch musi dac sie sprowadzic do wartosci calkowitej (czyli np. char, int, enumerator). Różnica między switch a if else: w przypadku
    dwóch opcji warunkowych (coś lub coś) należy korzystać z instrukcji if else, jednak w przypadku trzech lub więcej opcji warunkowych instrukcja switch jest wydajniejsza

24. Ograniczenie typow wartosci zwracanych z funkcji - mozna zwracac wszystkie typy danych poczawszy od pojedynczych typow wbudowanych (np int), az po struktury i obiekty klas, za wyjatkiem tablic
    wlasnych stworzonych przez uzytkownika (jednak mozna zwrocic obiekt klasy zawierajacy tablice). Rozwiązaniem w przypadku zwracania tablic jest zwrócenie adresu na pierwszy element danej tablicy.
    
25. Prototypowanie - wykorzystywane jest na etapie kompilacji programu, stad rownoznaczne jest ze statyczna kontrola typow. Prototypowanie chroni przed błędami zwiazanymi m.in. z nieprawidlowa
    liczba parametrow i nieprawidlowym typem parametru badz wartosci zwracanej (w szczegolnosci dzieki prototypowaniu kompilator jest w stanie przeprowadzic automatyczna konwersje danego typu na 
    typ okreslony jako typ wartosci parametru lub wartosci zwracanej).
    
26. Nazewnictwo w funkcjach:
    - parametr (inaczej parametr formalny) - zmienna używana do odbioru przekazanej wartosci w funkcji
    - argument (inaczej parametr faktyczny) - zmienna używana do przekazania wartosci do funkcji

27. Przekazywanie tablic jednowymiarowych do funkcji: "void funkcja(int tab[]);" = "void funkcja(int * tab);" -> gdzie tab to wskaznik na pierwszy element przekazywanej tablicy

28. Wskazniki i modifikator "const":
    - "const int * ps;" -> ps jest wskaznikiem na stala int -> nie mozna zmieniac wartosci danej wskazywanej przez ps (stale '*ps'), ale mozna zmieniac to na co wskazuje ps (niestale 'ps')
    - "int * const ps;" -> ps jest stalym wskaznikiem na int -> mozna zmieniac wartosc danej wskazywanej przez ps (niestale '*ps'), ale nie mozna zmieniac tego na co wskazuje ps (stale 'ps')
    
29. Przekazywanie tablic dwuwymiarowych do funkcji (przypadek dla tablicy zadeklarownej jako "int tab[3][5];"):
    - 'tab' to wskaznik na pierwszy element tablicy, czyli na tablice piecu wartosci typu int
    - "void funkcja(int (*tab)[5]);" -> tab jest wskaznikiem piecioelementowych tablic typu int
    - "void funkcja(int tab[][5]);" -> prostszy rownoznaczny zapis
    - "void funkcja(const int tab[][5]);" lub "void funkcja(const int (*tab)[5]);" -> niepoprawne - nie mozna deklarowac jako const wskaznikow na wskazniki
    - ogolnie dla tablic dwuwymiarowych zachodzi rownosc: 'tab[x][y] = *(*(tab+x)+y)'
    
30. Rekurencja - zakladamy, że istnieje pewna funkcja rekurencyjna w postaci:
    void rekurencja()
    {
        instrukcje1;
        if(warunek)
            rekurencja();
        instrukcje2;
    }
    Zależności:
    - cykl 1: dopóki 'warunek' jest równy wartości 'true' -> ciągle wykonywanie wyrażenia 'instrukcje1' oraz kolejne rekurencyjne wywoływania funkcji 'rekurencja'
    - cykl 2: w momencie gdy 'warunek' jest rowny wartosci 'false' -> pominiecie kolejnego rekurencyjnego wywolania funkcji 'rekurencja', przejscie do wyrazenia 'instrukcje2', a nastepnie powrot do
      poprzedniego wywołania funkcji 'rekurencja' -> cykl 2 powtórzy się tyle samo razy, ile razy został wykonany cykl 1
    - przykład: jeśli funkcja 'rekurencja' jest wywoływana rekurencyjnie pięciokrotnie, to wtedy najpierw pięć razy z rzędu zostanie wykonane wyrażenie 'instrukcje1', a następnie pięc razy z rzędu
      zostanie wykonane wyrażenie 'instrukcje2'
      
31. 









